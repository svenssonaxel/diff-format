#!/usr/bin/env python3
import contextlib, hashlib, os, re, sys, tempfile, unittest

def m(pattern, string):
    match = re.match(pattern, string, re.DOTALL)
    if not match:
        return None
    if(match.group(0) != string):
        die(f'Pattern /${pattern}/ matched only part of string')
    ret = []
    for index in range((match.lastindex or 0)+1):
        ret.append(match.group(index))
    return ret

def die(reason):
    sys.stderr.write(reason+'\n')
    sys.exit(1)

# Polyfill
if not 'waitstatus_to_exitcode' in dir(os):
    def waitstatus_to_exitcode(sts):
        if os.WIFSIGNALED(sts):
            return -os.WTERMSIG(sts)
        else:
            assert os.WIFEXITED(sts), "Status is {:n}".format(sts)
            return os.WEXITSTATUS(sts)
    os.waitstatus_to_exitcode = waitstatus_to_exitcode

@contextlib.contextmanager
def inDir(dirName):
    olddir = os.getcwd()
    os.chdir(dirName)
    try:
        yield
    finally:
        os.chdir(olddir)

@contextlib.contextmanager
def filesInTmpDir(files):
    with tempfile.TemporaryDirectory() as tempdir:
        ec = os.waitstatus_to_exitcode(os.system(f'cp -pr -- {" ".join(files)} {tempdir}'))
        if not ec==0:
            die('Failed to copy files into temporary directory')
        with inDir(tempdir):
            yield

implementationsOf={}
def findImplementations():
    with inDir(os.path.join('..', 'implementations')):
        for dirName in os.listdir():
            if(os.path.isdir(dirName)):
                with inDir(dirName):
                    path=os.getcwd()
                    for fileName in os.listdir():
                        implementationsOf[fileName] = [*(implementationsOf[fileName] if fileName in implementationsOf else []), os.path.join(path, fileName)]

def red(text):
    if(sys.stdout.isatty()):
        return f'\x1b[31m{text}\x1b[0m'
    else:
        return text

class TestAll(unittest.TestCase):

    # Count asserts

    _assertCount=0

    def assertEqual(self, expected, actual):
        self._assertCount+=1
        super().assertEqual(expected, actual)

    # Pretty nested tests

    _nestTestMsgs=[]

    @contextlib.contextmanager
    def nestTest(self, msg):
        self._nestTestMsgs.append(msg)
        msgs=[*self._nestTestMsgs] # Defensive copy
        print(f"{' │' * (len(msgs) - 1)} ╭╴{msg}")
        done=False
        try:
            with self.subTest("Nested test", path=msgs):
                yield
                print(f"{' │' * (len(msgs) - 1)} ╰╴Done")
                done=True
        finally:
            if not done:
                print(f"{' │' * (len(msgs) - 1)} ╰╴{red('NOT SUCCESSFUL!')} TEST PATH:")
                for m in msgs:
                    print(f"{' │' * (len(msgs) - 1)}   ✦ {m}")
                if(sys.stdin.buffer.isatty() and sys.stdout.buffer.isatty()):
                    print(f"{' │' * (len(msgs) - 1)}   ➔ Current dir: {os.getcwd()}")
                    print("pausing…")
                    sys.stdin.readline()
            self._nestTestMsgs.pop()

    # Deduplication of generated tests
    _doneTests=[]
    def alreadyRun(self, *testId):
        if(testId in self._doneTests):
            return True
        self._doneTests.append(testId)
        return False

    # Will be executed by unittest.main

    def test_all(self):
        testdirs=os.listdir()
        testdirs.sort()
        for testdir in testdirs:
            self._doneTests=[]
            if re.match('^[0-9]{3}$', testdir):
                with self.nestTest(f'Tests in directory {testdir}'):
                    with inDir(testdir):
                        self.doTestThisDir()
        print(f'(asserts={self._assertCount})')

    # Run all tests in one directory

    def doTestThisDir(self):
        contentfiles = []
        files=os.listdir()
        files.sort()
        for filename in files:
            match = m('^[0-9]+-([a-z])-([a-z])\.(.*)', filename)
            if(match):
                with self.nestTest(f'Test file {filename}'):
                    v1 = match[1]
                    v2 = match[2]
                    testtype = match[3]
                    if(testtype=='unified.diff'):
                        self.doTestDiff(filename, v1, v2, 'unified')
                    elif(testtype=='hintful.diff'):
                        self.doTestDiff(filename, v1, v2, 'hintful')
                    elif(testtype=='compat.diff'):
                        self.doTestDiff(filename, v1, v2, 'compat')
                    elif(testtype=='invalid.unified.diff'):
                        self.doTestInvalidDiff(filename, 'unified')
                    elif(testtype=='invalid.hintful.diff'):
                        self.doTestInvalidDiff(filename, 'hintful')
                    elif(testtype=='invalid.compat.diff'):
                        self.doTestInvalidDiff(filename, 'compat')
                    else:
                        self.fail(f"Don't know what to do with file {filename}")
                continue
            match = m('^([a-z])$', filename)
            if(match):
                for otherfile in contentfiles:
                    with self.nestTest(f'Test content files {otherfile} and {filename}'):
                        self.doTestContentFiles(otherfile, filename)
                contentfiles.append(filename)
                continue
            self.fail(f"Don't know what to do with file {filename}")

    # Functions for testing

    def doTestDiff(self, diffFile, v1, v2, mode):
        if(self.alreadyRun("doTestDiff", self.hashFile(diffFile), v1, v2, mode)): return
        # Validate diff file
        for validateDiff in implementationsOf[f'validate-{mode}-diff']:
            with self.nestTest(f'Validate {mode} diff using {validateDiff}'):
                self.sh(f'cat {diffFile} | {validateDiff}')
        # For compat and unified format, try patching
        if(mode in ['compat', 'unified']):
            self.doTestDiffForwardPatch(diffFile, v1, v2, mode)
        # A compat format diff should always be able to be treated as hintful or unified
        if(mode=='compat'):
            for othermode in ['hintful', 'unified']:
                with self.nestTest(f'Interpret this compat diff as if it was in {othermode} format'):
                    self.doTestDiff(diffFile, v1, v2, othermode)
        # Test converting to the other diff formats
        if not m(r'^.*converted-to\..*$', diffFile):
            for othermode in ['compat', 'hintful', 'unified']:
                if(mode==othermode): continue
                for convertDiff in implementationsOf[f'convert-{mode}-diff-to-{othermode}-diff']:
                    with self.nestTest(f'Convert to {othermode} using {convertDiff}'):
                        with filesInTmpDir([diffFile, v1, v2]):
                            self.sh(f'cat {diffFile} | {convertDiff} > {diffFile}.converted-to.{othermode}.diff')
                            self.doTestDiff(f'{diffFile}.converted-to.{othermode}.diff', v1, v2, othermode)
        # Test reversing
        for reverseDiff in implementationsOf[f'reverse-{mode}-diff']:
            with self.nestTest(f'Reverse {mode} diff using {reverseDiff}'):
                with filesInTmpDir([diffFile, v1, v2]):
                    self.sh(f'cat {diffFile} | {reverseDiff} > {diffFile}.reversed')
                    self.assertNotSame(diffFile, f'{diffFile}.reversed')
                    with self.nestTest('Three reversions has the same effect as one'):
                        self.sh(f'cat {diffFile}.reversed | {reverseDiff} | {reverseDiff} > {diffFile}.triple-reversed')
                        self.assertSame(f'{diffFile}.reversed', f'{diffFile}.triple-reversed')
                    with self.nestTest('Use reverse diff file as diff file'):
                        self.doTestDiff(f'{diffFile}.reversed', v2, v1, mode)
        # If no `\ No newline` lines are found, test newline conversions
        if(not self.shBool(f"grep -ERq '^\\|?\\\\ No newline' {diffFile}")):
            with filesInTmpDir([diffFile, v1, v2]):
                for [explanation, ext, PRE] in [
                        ['Add CR', 'add-cr', r's@\n@\r\n@'],
                        ['Add CRCR', 'add-crcr', r's@\n@\r\r\n@'],
                        ['Remove CR', 'rm-cr', r's@\r\n@\n@'],
                        ['Remove CR twice', '2rm-cr', r's@\r\n@\n@;s@\r\n@\n@'],
                ]:
                    with self.nestTest(f'Convert newline: {explanation}'):
                        newDiffFile=f'{diffFile}.{ext}.diff'
                        newV1=f'{v1}.{ext}'
                        newV2=f'{v2}.{ext}'
                        self.sh(f'cp {diffFile} {newDiffFile}')
                        self.sh(f'cp -pr {v1} {newV1}')
                        self.sh(f'cp -pr {v2} {newV2}')
                        self.mapFiles(f"perl -pe '{PRE}'", [newDiffFile, newV1, newV2])
                        # Validity should be preserved over newline conversions
                        for validateDiff in implementationsOf[f'validate-{mode}-diff']:
                            with self.nestTest(f'Validate {mode} diff using {validateDiff}'):
                                self.sh(f'cat {newDiffFile} | {validateDiff}')
                        self.doTestDiffForwardPatch(newDiffFile, newV1, newV2, mode)

    def doTestDiffForwardPatch(self, diffFile, v1, v2, mode):
        if(self.alreadyRun("doTestDiffForwardPatch", self.hashFile(diffFile), v1, v2, mode)): return
        with self.nestTest(f'Test {mode} forward patch'):
            with filesInTmpDir([diffFile, v1, v2]):
                if(mode in ['compat', 'unified']):
                    self.assertNotSame(v1, v2)
                    self.sh(f'cp -pr {v1} {v1}.bu')
                    for patchUnified in implementationsOf['patch-unified']:
                        with self.nestTest(f'Patch unified using {patchUnified}'):
                            with filesInTmpDir([diffFile, v1, v2, f'{v1}.bu']):
                                self.sh(f'{patchUnified} {v1} < {diffFile}')
                                self.assertSame(v1, v2)
                                self.assertNotSame(v1, f'{v1}.bu')
                else:
                    for convertToUnifiedDiff in implementationsOf[f'convert-{mode}-diff-to-unified-diff']:
                        with self.nestTest(f'Convert to unified using {convertToUnifiedDiff}'):
                            with filesInTmpDir([diffFile, v1, v2]):
                                self.sh(f'cat {diffFile} | {convertToUnifiedDiff} > {diffFile}.converted-to.unified.diff')
                                self.doTestDiffForwardPatch(f'{diffFile}.converted-to.unified.diff', v1, v2, 'unified')

    def doTestInvalidDiff(self, diffFile, mode):
        for validateDiff in implementationsOf[f'validate-{mode}-diff']:
            with self.nestTest(f'Make sure {mode} diff is invalid using {validateDiff}'):
                self.sh(f'cat {diffFile} | {validateDiff} 2>/dev/null', 1)
            # Validity should be preserved over newline conversions for any diff file not using the `\ No newline` syntax
            if(not self.shBool(f"grep -ERq '^\\|?\\\\ No newline' {diffFile}")):
                for [explanation, PRE] in [
                        ['Add CR', r's@\n@\r\n@'],
                        ['Add CRCR', r's@\n@\r\r\n@'],
                        ['Remove CR', r's@\r\n@\n@'],
                        ['Remove CR twice', r's@\r\n@\n@;s@\r\n@\n@'],
                ]:
                    with self.nestTest(f'Convert newline: {explanation}'):
                        with filesInTmpDir([diffFile]):
                            newDiffFile=f'{diffFile}.newlineconverted.diff'
                            self.sh(f'cp {diffFile} {newDiffFile}')
                            self.mapFiles(f"perl -pe '{PRE}'", [newDiffFile])
                            with self.nestTest(f'Make sure {mode} diff is invalid using {validateDiff}'):
                                self.sh(f'cat {newDiffFile} | {validateDiff} 2>/dev/null', 1)
        # A compat format diff should always be able to be treated as hintful or unified.
        # Hence, an invalid hintfule or unified diff must never be a valid compat diff
        if(mode in ['hintful', 'unified']):
            with self.nestTest(f'Interpret this {mode} diff as if it was in compat format'):
                self.doTestInvalidDiff(diffFile, 'compat')

    def doTestContentFiles(self, v1, v2):
        for mode in ['hintful', 'unified']:
            for diff in (implementationsOf[f'diff-{mode}'] or []):
                with self.nestTest(f'Create {mode} diff using {diff}'):
                    with filesInTmpDir([v1, v2]):
                        self.sh(f'{diff} {v1} {v2} > generated_diff-{v1}-{v2}.{mode}.diff', 1)
                        self.doTestDiff(f'generated_diff-{v1}-{v2}.{mode}.diff', v1, v2, mode)

    # Utility

    def assertSame(self, v1, v2):
        self.sh(f'diff -u -r {v1} {v2}', 0)

    def assertNotSame(self, v1, v2):
        self.sh(f'diff -u -r {v1} {v2} > /dev/null', 1)

    def sh(self, cmd, expectedExitCode=0):
        self.assertEqual(expectedExitCode, os.waitstatus_to_exitcode(os.system(f'set -e; {cmd}')))

    def shBool(self, cmd):
        ec = os.waitstatus_to_exitcode(os.system(f'set -e; {cmd}'))
        assert ec in [0, 1]
        return {0: True, 1: False}[ec]

    def hashFile(self, fileName):
        with open(fileName,'rb') as file:
            return hashlib.sha256(file.read()).hexdigest()

    def mapFiles(self, cmd, files):
        for filename in files:
            if(os.path.isfile(filename)):
                self.sh(f'cat {filename} | {cmd} > {filename}.tmp.processing; mv {filename}.tmp.processing {filename};')
            elif(os.path.isdir(filename)):
                files2 = os.listdir(filename)
                with inDir(filename):
                    self.mapFiles(cmd, files2)
            else:
                die(f'Cannot map file node {os.path.join(os.getcwd(),filename)}')

if m('^.*[ !"#$&\'()*+;<>?\\^`{|}~].*$', os.getcwd()):
    die(f'Running from a weird path.')
findImplementations()
if __name__ == '__main__':
    unittest.main()
